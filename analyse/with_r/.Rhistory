geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): TOP-10 (N=450)") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3") +
stat_summary(fun.y=mean, geom="point", shape=18, size=3, color="red")
## ----------------------------------------------------------------
## Zeiten / Pace-Analysen
df_ww4 <- df_ww3
df_ww4$FN_M_S <- round(42195 / df_ww4$S_KM_FN, digits = 2) # Pace in m/s - FN
df_ww4$HM_M_S <- round(21097.5 / df_ww4$S_KM_HM, digits = 2) # Pace in m/s - HM
View(df_wetter_4y)
View(df_ww3y)
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Zeit (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-10 (N=450)") +
scale_x_continuous(breaks = seq(7000,11000,200)) + scale_y_continuous(breaks = seq(0,70,5))
ggplot(data = df_ww3y_m_top3, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-3") +
scale_x_continuous(breaks = seq(7000,9000,100)) + scale_y_continuous(breaks = seq(0,70,5))
# Frauen
ggplot(data = df_ww3y_w_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 100, color="white", fill="skyblue") +
labs(x="Zeit (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (W): TOP-10 (N=450)") +
scale_x_continuous(breaks = seq(7000,11000,200)) + scale_y_continuous(breaks = seq(0,70,5))
ggplot(data = df_ww3y_w_top3, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 140, color="white", fill="skyblue") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (W): TOP-3") +
scale_x_continuous(breaks = seq(7000,11000,500)) + scale_y_continuous(breaks = seq(0,70,5))
round(cor(df_ww3y_tokyo_w_top3$TMP_MEAN_RND1, df_ww3y_tokyo_w_top3$S_KM_FN), 2)
View(df_wetter_1)
str(df_wetter_1)
str(df_wetter_csv)
# Scatterplots:
# Männer
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort)) + geom_point(alpha=1, size=3) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M): TOP-10", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,8500,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort:") +
theme(legend.position = "bottom")
ggplot(df_ww3y_m_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort)) + geom_point(alpha=1, size=3) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,8500,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort:") +
theme(legend.position = "bottom")
# Allgemein:
ggplot(df_ww3y_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Geschlecht)) + geom_point(alpha=1, size=1.5) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M/W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,10000,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5)
ggplot(df_ww3y_m_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort)) + geom_point(alpha=1, size=2) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,8500,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5) +
theme(legend.position = "none")
# Allgemein:
ggplot(df_ww3y_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Geschlecht)) + geom_point(alpha=1, size=1.5) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M/W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,10000,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5)
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Zeit (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-10 (N=450)") +
scale_x_continuous(breaks = seq(7000,11000,200)) + scale_y_continuous(breaks = seq(0,70,5))
# Allgemein:
ggplot(df_ww3y_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Geschlecht)) + geom_point(alpha=1, size=1.5) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M/W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,10000,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5)
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Zeit (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-10 (N=450)") +
scale_x_continuous(breaks = seq(7000,11000,200)) + scale_y_continuous(breaks = seq(0,70,5))
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
# Boxplot: Ergebnisse / Wettbewerbsort (W)
ggplot(df_ww3y_w_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (W): TOP-10 (N=450)") +
scale_y_continuous(breaks = seq(8000,11000,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3") +
stat_summary(fun.y=mean, geom="point", shape=18, size=3, color="red")
## ----------------------------------------------------------------
# Finale Zeiten
describeBy(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, quant = c(.25,.75), skew=TRUE, mat=TRUE, digits = 2)
describe(df_ww3y_m_top3$S_KM_FN,quant = c(.25,.75), skew=TRUE)
describeBy(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, quant = c(.25,.75), skew=TRUE, mat=TRUE, digits = 2)
ggplot(df_wetter_4y, aes(y=TMP_MEAN_RND1, x=Jahr, color=Ort)) +
geom_bar(stat = "identity") +
geom_hline(data=aggregate(x=df_wetter_4y$TMP_MEAN_RND1, by=list(Ort=df_wetter_4y$Ort), FUN="mean"), aes(yintercept = x), color="red") +
labs(y="Temperatur (°C)", x="Jahr", title = "Temperaturverlauf (ausgewählte Jahre)") +
scale_y_continuous(breaks = seq(0,25,1.0)) +
scale_x_continuous(breaks = c(2010,2011,2013,2014,2015,2016,2017,2018,2019)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort") +
theme(axis.text.x = element_text(angle = 90),legend.position = "none") +
facet_wrap(~Ort, ncol=5)
ggplot(df_wetter_4y, aes(y=TMP_MEAN_RND1, x=Jahr, color=Ort)) +
geom_line(alpha=0.5, size=1) + geom_point() +
labs(y="Temperatur (°C)", x="Jahr", title = "Temperaturverlauf (ausgewählte Jahre)") +
scale_y_continuous(breaks = seq(0,25,1.0)) +
scale_x_continuous(breaks = c(2010,2011,2013,2014,2015,2016,2017,2018,2019)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort") #+ facet_wrap(~Ort, ncol=5)
ggplot(df_wetter_4y, aes(y=TMP_MEAN_RND1, x=Jahr, color=Ort)) +
geom_line(alpha=0.5, size=1) + geom_point() +
labs(y="Temperatur (°C)", x="Jahr", title = "Temperaturverlauf (ausgewählte Jahre)") +
scale_y_continuous(breaks = seq(0,25,1.0)) +
scale_x_continuous(breaks = c(2010,2011,2013,2014,2015,2016,2017,2018,2019)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort") +
theme(axis.text.x = element_text(angle = 90),legend.position = "none") +
facet_wrap(~Ort, ncol=5)
ggplot(df_wetter_4y, aes(y=TMP_MEAN_RND1, x=Jahr, color=Ort)) +
geom_bar(stat = "identity") +
geom_hline(data=aggregate(x=df_wetter_4y$TMP_MEAN_RND1, by=list(Ort=df_wetter_4y$Ort), FUN="mean"), aes(yintercept = x), color="red") +
labs(y="Temperatur (°C)", x="Jahr", title = "Temperaturverlauf (ausgewählte Jahre)") +
scale_y_continuous(breaks = seq(0,25,1.0)) +
scale_x_continuous(breaks = c(2010,2011,2013,2014,2015,2016,2017,2018,2019)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort") +
theme(axis.text.x = element_text(angle = 90),legend.position = "none") +
facet_wrap(~Ort, ncol=5)
describe(df_ww3y_m_top3$S_KM_FN,quant = c(.25,.75), skew=TRUE)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
# Allgemein:
ggplot(df_ww3y_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Geschlecht)) + geom_point(alpha=1, size=1.5) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M/W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,10000,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5)
ggplot(df_ww3y_w_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort)) + geom_point(alpha=1, size=2) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(8000,10000,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5) +
theme(legend.position = "none")
ggplot(df_ww3y_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Geschlecht)) + geom_point(alpha=0.8, size=3) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M/W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7100,10000,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom")
# Allgemein:
ggplot(df_ww3y_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Geschlecht)) + geom_point(alpha=1, size=1.5) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M/W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,10000,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5)
ggplot(df_ww3y_m_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort)) + geom_point(alpha=1, size=2) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,8500,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5) +
theme(legend.position = "none")
ggplot(df_ww3y_w_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort)) + geom_point(alpha=1, size=2) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(8000,10000,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom") +
facet_wrap(~Ort, ncol=5) +
theme(legend.position = "none")
ggplot(df_ww3y_top3, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Geschlecht)) + geom_point(alpha=0.8, size=3) +
labs(y="Zeit (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M/W): TOP-3", subtitle = "Zeit ~ Temperatur") +
scale_y_continuous(breaks = seq(7100,10000,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Geschlecht:") +
theme(legend.position = "bottom")
summary(lm_berlin_w_top3_poly2)
## Manuel: ohne Funktio
## Alle Orte je Geschlecht
ggplot(subset(df_ww3y, (Geschlecht=="M" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (°C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(7100,8300,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort, ncol=5)
## Manuel: ohne Funktio
## Alle Orte je Geschlecht
ggplot(subset(df_ww3y, (Geschlecht=="M" & Platz <= 3)), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (°C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(7100,8300,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort, ncol=5)
ggplot(subset(df_ww3y, (Geschlecht=="W" & Platz <= 3)), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (W): TOP-3", x="Temperatur (°C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(8000,9500,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort, ncol=5)
## Manuel: ohne Funktio
## Alle Orte je Geschlecht
ggplot(subset(df_ww3y, (Geschlecht=="M" & Platz <= 3)), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (°C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(7100,8300,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort, ncol=5)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(data=df_ww3y_m_top3, y = S_KM_FN, group=Ort)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(df_ww3y_m_top3$S_KM_FN,group=Ort)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(df_ww3y_m_top3$S_KM_FN)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(df_ww3y_m_top3$S_KM_FN, group=df_ww3y_m_top3$Ort)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(y=S_KM_FN, group=Ort, data = df_ww3y_m_top3)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(S_KM_FN~Ort, data = df_ww3y_m_top3)
leveneTest(S_KM_FN~Ort, data = df_ww3y_w_top3)
## QQ-Plot
subset(df_ww3y_m_top3, (Ort=="Berlin"))
subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)
scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN))
qqnorm(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
qqline(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
ggplot(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN))) +
#geom_line(aes(color=Platz))+
geom_point() +
#scale_x_continuous(breaks = seq(0,10,1)) +
#scale_y_continuous(breaks = seq(0,9000,500)) +
scale_fill_brewer(palette="Set3")
ggplot(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN))) +
#geom_line(aes(color=Platz))+
geom_point() +
#scale_x_continuous(breaks = seq(0,10,1)) +
#scale_y_continuous(breaks = seq(0,9000,500)) +
#scale_fill_brewer(palette="Set3")
#qqnorm()
qqline(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
ggplot(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN))) +
#geom_line(aes(color=Platz))+
stat_qq()
ggplot(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)) +
#geom_line(aes(color=Platz))+
stat_qq()
ggplot(subset(df_ww3y_m_top3, (Ort=="Berlin")), aes(sample=S_KM_FN) +
)
ggplot(subset(df_ww3y_m_top3, (Ort=="Berlin")), aes(sample=S_KM_FN)) +stat_qq()
ggplot(subset(df_ww3y_m_top3, (Ort=="Berlin")), aes(sample=S_KM_FN)) +stat_qq() + stat_qq_line()
ggplot(subset(df_ww3y_m_top3, (Ort=="Berlin")), aes(sample=S_KM_FN)) +stat_qq() + stat_qq_line()
ggplot(df_ww3y_m_top3, aes(sample=S_KM_FN, color="Ort")) +stat_qq() + stat_qq_line()
ggplot(df_ww3y_m_top3, aes(sample=S_KM_FN, color=factor(Ort))) +stat_qq() + stat_qq_line()
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) +stat_qq() + stat_qq_line()
qqnorm(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
qqline(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) +stat_qq() + stat_qq_line()
qqnorm(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
qqline(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) +stat_qq() + stat_qq_line()
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort)
scale_fill_brewer(palette="Set3") +
facet_wrap(~Geschlecht)
ggplot(df_ww3y_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line()
scale_fill_brewer(palette="Set3") +
qqnorm(scale(subset(df_ww3y_m_top3, (Ort=="Berlin"), select = S_KM_FN)))
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line()
scale_fill_brewer(palette="Set3") +
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line()
scale_fill_brewer(palette="Set3") +
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line()
## --------------------------------------------------------------------
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
View(df_ww3y_w_top3)
scale_fill_brewer(palette="Set3")
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
scale_fill_brewer(palette="Set3")
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
scale_fill_brewer(palette="Set3")
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 4)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 5)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Verteilung - Stichprobe", x="Verteilung - Theoretisch", title = "Prüfung auf Normalverteilung",
subtitle = "Zeit ~ Temperatur") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Verteilung - Stichprobe", x="Verteilung - Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Verteilung - Stichprobe", x="Verteilung - Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort)
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (W): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
ggsave(filename = "qq_norm_m_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (W): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
ggsave(filename = "qq_norm_m_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
ggsave(filename = "qq_norm_m_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (W): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
ggsave(filename = "qq_norm_w_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
## QQ-Plot
ggplot(df_ww3y_m_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 3)
ggsave(filename = "qq_norm_m_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (W): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 2)
ggsave(filename = "qq_norm_w_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(df_ww3y_w_top3, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (W): TOP-3") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 3)
ggsave(filename = "qq_norm_w_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(df_ww3y_m_all, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (M): TOP-10") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 3)
ggsave(filename = "qq_norm_m_top10.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(df_ww3y_w_all, aes(sample=scale(S_KM_FN), color=factor(Ort))) + stat_qq() + stat_qq_line() +
labs(y="Stichprobe", x="Theoretisch", title = "Prüfung auf Normalverteilung (Zeit)",
subtitle = "Ergebnisse (W): TOP-10") +
scale_fill_brewer(palette="Set3") +
theme(legend.position = "none") +
facet_wrap(~Ort, ncol = 3)
ggsave(filename = "qq_norm_w_top10.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(S_KM_FN~Ort, data = df_ww3y_m_top3)
leveneTest(S_KM_FN~Ort, data = df_ww3y_w_top3)
## --------------------------------------------------------------------
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## --------------------------------------------------------------------
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = TRUE, conf.level = 0.95)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(S_KM_FN~Ort, data = df_ww3y_m_top3)
leveneTest(S_KM_FN~Ort, data = df_ww3y_w_top3)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## ----------------------------------------------------------------
## Leven-Test
leveneTest(S_KM_FN~Ort, data = df_ww3y_m_top3)
leveneTest(S_KM_FN~Ort, data = df_ww3y_w_top3)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = TRUE, conf.level = 0.95)
