library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
View(df_ww3y)
View(df_ww5rs)
View(df_ww5)
## ----------------------------------------------------------------
# Korrelation
ggplot(data = df_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_TYP, fill=SKM_ZEIT)) +
geom_tile()
## ----------------------------------------------------------------
# Korrelation
ggplot(data = df_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_ZEIT, fill=SKM_TYP)) + geom_tile()
## ----------------------------------------------------------------
# Korrelation
ggplot(data = df_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_TYP, fill=SKM_ZEIT)) + geom_tile()
df_ww5cor <- round(cor(df_ww5rs,x = TMP_MEAN_RND1, y = SKM_ZEIT),2 )
df_ww5cor <- round(cor(df_ww5rs,x = TMP_MEAN_RND1, y = SKM_ZEIT),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, y = df_ww5rs$SKM_ZEIT),2)
df_ww5cor <- round(cor(x = df_ww5rs),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, x = df_ww5rs$SKM_ZEIT),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, y = df_ww5rs$SKM_ZEIT),2)
rm(df_ww5cor)
cor_ww5rs <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, y = df_ww5rs$SKM_ZEIT),2)
cor_ww5rs
## ----------------------------------------------------------------
# Korrelation
df_ww5
View(df_ww3)
## ----------------------------------------------------------------
# Korrelation
subset(df_ww3, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE), c("S_KM_5"))
## ----------------------------------------------------------------
# Korrelation
df_ww3
## ----------------------------------------------------------------
# Korrelation
df_ww5
subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE), c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))
subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))
round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")),y=c("TMP_MEAN_RND1")),2)
round(cor(x=subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")),y=c("TMP_MEAN_RND1")),2)
round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
cor_ww5rs <- melt(round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2))
library(reshape2)
cor_ww5rs <- melt(round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2))
ggplot(data = cor_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_TYP, fill=SKM_ZEIT)) + geom_tile()
View(cor_ww5rs)
ggplot(data = cor_ww5rs, aes(x=var1, y=var2, fill=value)) + geom_tile()
ggplot(data = cor_ww5rs, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
View(cor_ww5rs)
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile()
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text()
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(x=Var1, y=Var2, fill=value))
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2))
, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="Chicago" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)),
(Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="London" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)),
(Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="London" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)),
(Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
cor_ww5rs[lower.tri(cor_ww5rs)] <- NA
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
ggplot(data = melt(cor_ww5rs)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
cor_ww5rs[lower.tri(cor_ww5rs)] <- NA
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & Platz<=5 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="NewYork" & Geschlecht=="M" & Platz<=3 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Tokyo" & Geschlecht=="M" & Platz<=3 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter: W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter: W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=1,tmp_min=0, tmp_max=12.5, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter: W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=1,tmp_min=12.5, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter (p1): W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter (p2): W
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Chicago" & Geschlecht=="W" & Platz<=1 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Scatterplots:
# Männer
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort), ) + geom_point(alpha=0.5, size=1) +
labs(y="Ergebnisse (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M): Gesamt", subtitle = "Ergebnisse ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,8500,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort")
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): Gesamt") +
scale_x_continuous(breaks = seq(7000,9000,100)) + scale_y_continuous(breaks = seq(0,70,5))
# Boxplot: Ergebnisse / Wettbewerbsort (M)
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): Gesamt") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggplot(df_ww3y_m_top3, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): TOP-3") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_m_all.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Boxplot: Ergebnisse / Wettbewerbsort (M)
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): Gesamt") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggplot(df_ww3y_m_top3, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): TOP-3") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
## ----------------------------------------------------------------
# pairwise-test: two.sided
pairwise.t.test(subset(df_ww3y,Geschlecht=="M")$S_KM_FN, df_wma_ort_skm_m$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
## ----------------------------------------------------------------
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
## ----------------------------------------------------------------
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='London'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.95, var.equal = FALSE, alternative = "greater"
)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='Chicago'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.95, var.equal = FALSE, alternative = "greater"
)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='Chicago'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.995, var.equal = FALSE, alternative = "greater"
)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='Chicago'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.95, var.equal = FALSE, alternative = "greater"
)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='London'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.95, var.equal = FALSE, alternative = "greater"
)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='London'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.95, var.equal = FALSE, alternative = "less"
)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='Chicago'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.95, var.equal = FALSE, alternative = "less"
)
## ----------------------------------------------------------------
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# Einseitiger Test
t.test(x=subset(df_ww3y_m_all, (Ort=='Berlin'), select = c(S_KM_FN)),
y=subset(df_ww3y_m_all, (Ort=='Chicago'), select = c(S_KM_FN)),
paired = FALSE, conf.level = 0.975, var.equal = FALSE, alternative = "less"
)
## ----------------------------------------------------------------
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "greater",
paired = FALSE, pool.sd = FALSE)
##
##
pairwise.t.test(df_ww3y_w_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
##
##
pairwise.t.test(df_ww3y_w_all$S_KM_FN, df_ww3y_w_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_all$S_KM_FN, df_ww3y_w_all$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_all$S_KM_FN, df_ww3y_w_all$Ort,
p.adjust.method = "bonferroni", alternative = "greater",
paired = FALSE, pool.sd = FALSE)
## pairwise-test: M TOP5
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top5$S_KM_FN, df_ww3y_m_top5$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top5$S_KM_FN, df_ww3y_m_top5$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top5$S_KM_FN, df_ww3y_m_top5$Ort,
p.adjust.method = "bonferroni", alternative = "greater",
paired = FALSE, pool.sd = FALSE)
## pairwise-test: W TOP5
pairwise.t.test(df_ww3y_w_top5$S_KM_FN, df_ww3y_w_top5$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_top5$S_KM_FN, df_ww3y_w_top5$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top5$S_KM_FN, df_ww3y_w_top5$Ort,
p.adjust.method = "bonferroni", alternative = "greater",
paired = FALSE, pool.sd = FALSE)
## pairwise-test: W TOP5
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_w_top5$S_KM_FN, df_ww3y_w_top5$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_top5$S_KM_FN, df_ww3y_w_top5$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top5$S_KM_FN, df_ww3y_w_top5$Ort,
p.adjust.method = "bonferroni", alternative = "greater",
paired = FALSE, pool.sd = FALSE)
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort,
p.adjust.method = "bonferroni", alternative = "greater",
paired = FALSE, pool.sd = FALSE)
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort,
p.adjust.method = "bonferroni", alternative = "less",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort,
p.adjust.method = "bonferroni", alternative = "greater",
paired = FALSE, pool.sd = FALSE)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
# Boxplot: Ergebnisse / Wettbewerbsort (W)
ggplot(df_ww3y_w_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (W): Gesamt") +
scale_y_continuous(breaks = seq(8000,11000,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_w_all.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(df_ww3y_w_top5, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (W): TOP-5") +
scale_y_continuous(breaks = seq(8000,10000,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_w_top5.pdf", plot = last_plot(),scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 9, height = 5)
ggplot(df_ww3y_w_top5, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (W): TOP-5") +
scale_y_continuous(breaks = seq(8000,10000,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_w_top5.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = TRUE, device = "pdf", dpi=300, width = 1920, height = 1080)
describeBy(df_wma_ort_skm_m$S_KM_FN, df_wma_ort_skm_m$Ort)
## ----------------------------------------------------------------
describeBy(df_ww3y$S_KM_FN, df_ww3y$Ort)
## ----------------------------------------------------------------
describeBy(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort)
describeBy(df_ww3y_w_all$S_KM_FN, df_ww3y_w_all$Ort)
describe(df_ww3y_m_all)
# Boxplot: Ergebnisse / Wettbewerbsort (M)
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): TOP-10") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_m_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Boxplot: Ergebnisse / Wettbewerbsort (W)
ggplot(df_ww3y_w_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (W): TOP-10") +
scale_y_continuous(breaks = seq(8000,11000,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_w_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-10") +
scale_x_continuous(breaks = seq(7000,9000,100)) + scale_y_continuous(breaks = seq(0,70,5))
ggsave(filename = "hplt_ergb_m_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Frauen
ggplot(data = df_ww3y_w_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 100, color="white", fill="skyblue") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (W): TOP-10") +
scale_x_continuous(breaks = seq(7000,11000,500)) + scale_y_continuous(breaks = seq(0,70,5))
ggsave(filename = "hplt_ergb_vert_w_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-10") +
scale_x_continuous(breaks = seq(7000,9000,100)) + scale_y_continuous(breaks = seq(0,70,5))
ggsave(filename = "hplt_ergb_vert_m_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Scatterplots:
# Männer
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort), ) + geom_point(alpha=0.5, size=1) +
labs(y="Ergebnisse (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M): TOP-10", subtitle = "Ergebnisse ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,8500,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort")
ggsave(filename = "sctr_ergb_tmp_m_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Frauen
ggplot(df_ww3y_w_all, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort), ) + geom_point(alpha=0.5, size=1) +
labs(y="Ergebnisse (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (W): TOP-10", subtitle = "Ergebnisse ~ Temperatur") +
scale_y_continuous(breaks = seq(8000,11000,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort")
ggsave(filename = "sctr_ergb_tmp_w_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
describeBy(df_ww3_m_all$S_KM_FN, df_ww3_m_all$Ort)
describeBy(df_ww3_w_all$S_KM_FN, df_ww3_w_all$Ort)
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-10 (N:450)") +
scale_x_continuous(breaks = seq(7000,9000,100)) + scale_y_continuous(breaks = seq(0,70,5))
ggsave(filename = "hplt_ergb_vert_m_n450_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Frauen
ggplot(data = df_ww3y_w_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 100, color="white", fill="skyblue") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (W): TOP-10 (N:450)") +
scale_x_continuous(breaks = seq(7000,11000,500)) + scale_y_continuous(breaks = seq(0,70,5))
ggsave(filename = "hplt_ergb_vert_w_n450_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Frauen
ggplot(data = df_ww3y_w_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 100, color="white", fill="skyblue") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (W): TOP-10 (N=450)") +
scale_x_continuous(breaks = seq(7000,11000,500)) + scale_y_continuous(breaks = seq(0,70,5))
ggsave(filename = "hplt_ergb_vert_w_n450_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): TOP-10 (N=450)") +
scale_x_continuous(breaks = seq(7000,9000,100)) + scale_y_continuous(breaks = seq(0,70,5))
ggsave(filename = "hplt_ergb_vert_m_n450_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Boxplot: Ergebnisse / Wettbewerbsort (M)
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): TOP-10 (N=450)") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_m_n450_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Boxplot: Ergebnisse / Wettbewerbsort (W)
ggplot(df_ww3y_w_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (W): TOP-10 (N=450)") +
scale_y_continuous(breaks = seq(8000,11000,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_w_n450_top10.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
describeBy(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort)
