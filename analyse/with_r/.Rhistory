plot_reg <- plot_reg + geom_point() + geom_smooth(method = "lm", formula = y~poly(x,reg_poly)) +
labs(title = paste("LM: Ergebnisse (",geschlecht,") ~ Temperatur (x^", reg_poly,")", sep = ""), x="Temperatur (째C)", y="Ergebnisse (in Sek.)", subtitle = sub_title)
lm_reg_sum <- summary(lm_reg)
plot(plot_reg)
cat(paste(sub_title, "; Geschlecht: ", geschlecht, sep=""))
print(lm_reg_sum)
cat(paste("-----------------------------------------------------------------------------\n"))
# Return Summary mit Wettbewerbsparameteren
lm_reg_list <- list()
lm_reg_list[[1]] <- sub_title_list
lm_reg_list[[2]] <- lm_reg_sum
names(lm_reg_list) <- c("Wettbewerb","Regression")
return(lm_reg_list)
}
## ----------------------------------------------------------------------------------------------------------------------------------
## Plots erstellen (2)
create_reg_plots_2 <- function(data_frame,reg_poly=1,tmp_min, tmp_max, platz_min, platz_max, ort=c("Berlin","London","NewYork","Chicago","Tokyo")) {
skms <- c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")
file_name = paste("reg_p",reg_poly,"_tmp",tmp_min,"_",tmp_max,"_platz",platz_min,"_",platz_max,sep = "")
pdf(file = paste(file_name,".pdf",sep = ""), width = 8, height = 6)
sink(file = paste(file_name,".txt",sep = ""), append = TRUE)
for(g in unique(data_frame$Geschlecht)) {
for(o in ort) {
for(s in skms) {
my_reg_skm_tmp_2(data_frame,reg_poly,tmp_min, tmp_max, platz_min, platz_max, ort=o, geschlecht=g, skm=s)
}
}
}
sink()
dev.off()
}
# Andere Reihenfolge der Plots: Plaetze bereits gesetzt
create_reg_plots_3 <- function(data_frame) {
skms <- c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")
ort <- c("Berlin","London","NewYork","Chicago","Tokyo")
plaetze <- c(10,5,3,1)
file_name = paste("reg_p2_alle_jahre",sep = "")
pdf(file = paste(file_name,".pdf",sep = ""), width = 8, height = 6)
sink(file = paste(file_name,".txt",sep = ""), append = TRUE)
lm_regs <- list()
i <- 1
for(g in unique(data_frame$Geschlecht)) {
for(o in ort) {
for(s in skms) {
for(p in plaetze) {
lm_reg <-my_reg_skm_tmp_2(data_frame,reg_poly = 2,tmp_min = 0, tmp_max = 25, platz_min = 1, platz_max = p, ort=o, geschlecht=g, skm=s)
lm_regs[[i]] <- lm_reg
i <- i + 1
}
}
}
}
sink()
dev.off()
return(lm_regs)
}
## Funktion um aus dem Return aus create_reg_plots_3 eine Dataframe zu erzeugen
create_reg_plots_3_to_df <- function(lmsummary) {
n <- 1
for(i in lmsummary) {
ort <- i$Wettbewerb$Ort
platz <- i$Wettbewerb$Platz
temperatur <- i$Wettbewerb$Temperatur
geschlecht <- i$Wettbewerb$Geschlecht
skm <- i$Wettbewerb$SKM
rsq <- i$Regression$r.squared
arsq <- i$Regression$adj.r.squared
if(n == 1) {
df_return <- data.frame(ort, platz, temperatur, geschlecht, skm, rsq, arsq)
n <- 2
} else {
df_new <- data.frame(ort, platz, temperatur, geschlecht, skm, rsq, arsq)
df_return <- rbind(df_return, df_new)
}
}
colnames(df_return) <- c("Ort","Platz","Temperatur","Geschlecht","SKM","RSQ","ARSQ")
return(df_return)
}
## ----------------------------------------------------------------------------------------------------------------------------------
print_temps <- function(data_frame) {
plaetze = c(1,3,5,10)
sink(file = "temperatur_verteilung.txt", append = TRUE)
for(g in unique(data_frame$Geschlecht)) {
for(o in unique(data_frame$Ort)) {
cat(paste("Ort: ", o, "; Geschlecht: ", g, "\n",sep = ""))
cat(paste("-----------------------------------------\n", sep = ""))
for(p in plaetze) {
cat(paste("Platz <= ",p,sep = ""))
print(table(subset(data_frame, (Ort==o & Geschlecht==g & Platz <= p), select = "TMP_MEAN_RND1", drop = TRUE)))
}
cat(paste("-----------------------------------------\n", sep = ""))
}
}
cat(paste("Gesamt (table): -----------------------------------------\n", sep = ""))
print(table(data_frame$TMP_MEAN_RND1, data_frame$Ort, data_frame$Geschlecht))
sink()
}
## ----------------------------------------------------------------------------------------------------------------------------------
# Verlauf - alle Jahre pro Wettbewerbsort: Meter pro Sekunden / Streckenabschnitt
plot_paces <- function() {
pdf(file = paste("plt_paces",".pdf",sep = ""), width = 9, height = 7)
for(g in unique(df_ww5rs$Geschlecht)) {
for(o in unique(df_ww5rs$Ort)) {
for(p in c(1,3,5,10)) {
if(o != "Chicago") {
plot_pace <- ggplot(subset(df_ww5rs, (Geschlecht==g & Ort==o & Platz <=p & SKM_TYP >= 1 & ZZ_INVALID == FALSE)), aes(x=SKM_TYP, y=SKM_PACE, group=Platz)) +
geom_line(stat = "identity", position = "dodge", aes(color=Platz)) +
#geom_point() +
scale_color_continuous(breaks=seq(1,p,1)) +
scale_x_continuous(breaks = seq(1,10,1), labels = c("5","10","15","20","21","25","30","35","40","42")) +
scale_y_log10() +
labs(y="Geschwindikeit (in m/s)", x="Kilometerabschnitt", title = paste("Pace in ",o," (",g,"): TOP-",p, sep="")) +
#theme(legend.position = "none") +
facet_wrap(~Jahr)
}
else if(o == "Chicago") { # Das Jahr 2012 und 2013 enth채lt inkorrekte Daten
plot_pace <- ggplot(subset(df_ww5rs, (Geschlecht==g & Ort==o & Platz <=p & SKM_TYP >= 1 & ZZ_INVALID == FALSE & Jahr!=2012 & Jahr!=2013)), aes(x=SKM_TYP, y=SKM_PACE, group=Platz)) +
geom_line(stat = "identity", position = "dodge", aes(color=Platz)) +
#geom_point() +
scale_color_continuous(breaks=seq(1,p,1)) +
scale_x_continuous(breaks = seq(1,10,1), labels = c("5","10","15","20","21","25","30","35","40","42")) +
scale_y_log10() +
labs(y="Geschwindikeit (in m/s)", x="Kilometerabschnitt", title = paste("Pace in ",o," (",g,"): TOP-",p, sep="")) +
#theme(legend.position = "none") +
facet_wrap(~Jahr)
}
print(plot_pace)
}
}
}
dev.off()
}
## ----------------------------------------------------------------------------------------------------------------------------------
## ----------------------------------------------------------------------------------------------------------------------------------
## ----------------------------------------------------------------------------------------------------------------------------------
## ----------------------------------------------------------------------------------------------------------------------------------
## ----------------------------------------------------------------------------------------------------------------------------------
my_reg_skm_tmp_2(data_frame = df_ww3y,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=3, ort="Berlin", geschlecht="M", skm="S_KM_FN")
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=FN_M_S, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=FN_S_KM, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
ggplot(subset(df_ww4, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=HM_M_S, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
my_reg_skm_tmp_2(data_frame = df_ww3y,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=3, ort="Berlin", geschlecht="M", skm="S_KM_FN")
my_reg_skm_tmp_2(data_frame = df_ww3y,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=3, ort="Berlin", geschlecht="M", skm="S_KM_FN")
my_reg_skm_tmp_2(data_frame = df_ww3y,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=3, ort="Berlin", geschlecht="M", skm="S_KM_FN")
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
my_reg_skm_tmp_2(data_frame = df_ww3y,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=3, ort="Berlin", geschlecht="M", skm="S_KM_FN")
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2))
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)")
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M"& Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
facet_wrap(~Ort)
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M"& Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
facet_wrap(~Ort) +
ggsave(filename = "reg_p2_tmp_m_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M"& Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
facet_wrap(~Ort)
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M"& Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(7100,8300,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort)
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M"& Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(7100,8300,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort, ncol=5)
ggsave(filename = "reg_p2_tmp_m_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlib" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlib" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
## Manuel: ohne Funktio
ggplot(subset(df_ww3y, (Geschlecht=="M"& Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (M): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(7100,8300,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort, ncol=5)
ggsave(filename = "reg_p2_tmp_m_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
ggplot(subset(df_ww3y, (Geschlecht=="W" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), aes(y=S_KM_FN, x=TMP_MEAN_RND1, fill=Ort)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,2)) +
labs(title = "Ergebnisse (W): TOP-3", x="Temperatur (째C)", y="Zeit (in Sek.)", subtitle = "Zeit ~ Temperatur(x^2)") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(8000,9500,100)) +
scale_x_continuous(breaks = seq(0,22,2)) +
scale_fill_brewer(palette="Set3") +
facet_wrap(~Ort, ncol=5)
ggsave(filename = "reg_p2_tmp_w_top3.pdf", plot = last_plot(),units = "px",scale = 1.5, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="London" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
View(df_ww3y)
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="London" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Chicago" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="NewYork" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="London" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Chicago" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="NewYork" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ TMP_MEAN_RND1)
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ TMP_MEAN_RND1))
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ TMP_MEAN_RND1))
summary(lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2)))
save()
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
summary(lm_tokyo_m_top3_poly2)
# Regressionen Summary:
lm_berlin_m_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_london_m_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="London" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_chicago_m_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Chicago" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_newyork_m_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="NewYork" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_tokyo_m_top3_poly2 <-lm(data = subset(df_ww3y, (Geschlecht=="M" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_berlin_w_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Berlin" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_london_w_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="London" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_chicago_w_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Chicago" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_newyork_w_top3_poly2 <- lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="NewYork" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
lm_tokyo_w_top3_poly2 <-lm(data = subset(df_ww3y, (Geschlecht=="W" & Ort=="Tokyo" & Platz <= 3 & (TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 25))), formula = S_KM_FN ~ poly(TMP_MEAN_RND1,2))
summary(lm_berlin_m_top3_poly2)
## ----------------------------------------------------------------
## ----------------------------------------------------------------
## Korrelation
round(cor(df_ww3y_m_top3$TMP_MEAN_RND1, df_ww3y_m_top3$S_KM_FN), 2)
round(cor(df_ww3y_w_top3$TMP_MEAN_RND1, df_ww3y_w_top3$S_KM_FN), 2)
## ----------------------------------------------------------------
## ----------------------------------------------------------------
## Korrelation
round(cor(df_ww3y_top3$TMP_MEAN_RND1, df_ww3y_top3$S_KM_FN), 2)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
round(cor(df_ww3y_tokyo_w_top3$TMP_MEAN_RND1, df_ww3y_tokyo_w_top3$S_KM_FN), 2)
summary(lm_tokyo_w_top3_poly2)
summary(lm_berlin_m_top3_poly2)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car
## ----------------------------------------------------------------
## pairwise-test: M TOP10
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
## ----------------------------------------------------------------
## pairwise-test: M TOP10
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE)#, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
## ----------------------------------------------------------------
## pairwise-test: M TOP10
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE)
## --------------------------------------------------------------------
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN ~ df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_all$S_KM_FN, df_ww3y_w_all$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE)
## ----------------------------------------------------------------
## pairwise-test: M TOP10
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE)
## ----------------------------------------------------------------
## pairwise-test: M TOP10
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.975)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
summary(lm_newyork_m_top3_poly2)
## --------------------------------------------------------------------
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: less
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## --------------------------------------------------------------------
## pairwise-test: M TOP3
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## --------------------------------------------------------------------
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
## --------------------------------------------------------------------
## pairwise-test: W TOP3
## pairwise-test: two-sided
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: less
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "less", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_m_top3$S_KM_FN, df_ww3y_m_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
library(reshape2)
library(car)
# pairwise-test: greater
pairwise.t.test(df_ww3y_w_top3$S_KM_FN, df_ww3y_w_top3$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
df_ww3y_m_top1 <- subset(df_ww3y, (Geschlecht=='M' & Platz = 1))
df_ww3y_m_top1 <- subset(df_ww3y, (Geschlecht=='M' & Platz == 1))
df_ww3y_w_top1 <- subset(df_ww3y, (Geschlecht=='W' & Platz == 1))
pairwise.t.test(df_ww3y_m_top1$S_KM_FN, df_ww3y_m_top1$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
pairwise.t.test(df_ww3y_m_top1$S_KM_FN, df_ww3y_m_top1$Ort, p.adjust.method = "bonferroni", alternative = "two.sided", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
greater
greater
pairwise.t.test(df_ww3y_m_top1$S_KM_FN, df_ww3y_m_top1$Ort, p.adjust.method = "bonferroni", alternative = "greater", paired = FALSE, pool.sd = FALSE, conf.level = 0.95)
View(df_wma_1)
