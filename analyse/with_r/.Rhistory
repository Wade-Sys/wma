geom_line(stat = "identity", position = "dodge", aes(color=Platz)) +
#geom_point() +
scale_color_continuous(breaks=seq(1,3,1)) +
scale_x_continuous(breaks = seq(1,10,1), labels = c("5","10","15","20","21","25","30","35","40","42")) +
scale_y_log10() +
labs(y="Geschwindikeit (in m/s)", x="Kilometerabschnitt", title = paste("Pace in ",o," (",g,"): TOP-",p, sep="")) +
#theme(legend.position = "none") +
facet_wrap(~Jahr)
}
else if(o == "Chicago") { # Das Jahr 2012 und 2013 enthält inkorrekte Daten
plot_pace <- ggplot(subset(df_ww5rs, (Geschlecht==g & Ort==o & Platz <=p & SKM_TYP >= 1 & ZZ_INVALID == FALSE & Jahr!=2012 & Jahr!=2013)), aes(x=SKM_TYP, y=SKM_PACE, group=Platz)) +
geom_line(stat = "identity", position = "dodge", aes(color=Platz)) +
#geom_point() +
scale_color_continuous(breaks=seq(1,3,1)) +
scale_x_continuous(breaks = seq(1,10,1), labels = c("5","10","15","20","21","25","30","35","40","42")) +
scale_y_log10() +
labs(y="Geschwindikeit (in m/s)", x="Kilometerabschnitt", title = paste("Pace in ",o," (",g,"): TOP-",p, sep="")) +
#theme(legend.position = "none") +
facet_wrap(~Jahr)
}
print(plot_pace)
}
}
}
dev.off()
}
## ----------------------------------------------------------------------------------------------------------------------------------
plot_paces()
#summary(lm(data = subset(df_ww3_m_all, ((TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 20) & (Platz >= 1 & Platz <= 10) & Ort == "Tokyo")), formula = S_KM_FN ~ TMP_MEAN_RND1))
#ggplot(subset(df_ww3_m_all, ((TMP_MEAN_RND1 >= 0 & TMP_MEAN_RND1 <= 8) & (Platz >= 1 & Platz <= 10) & Ort == "Tokyo")), aes(y=S_KM_FN, TMP_MEAN_RND1)) +
#  geom_point() + geom_smooth(method = "lm", formula = y~x) +
#  labs(title = "LR: Laufzeiten(m) ~ Temperatur (gerundet)", x="Temperatur (°C)", y="Zeiten (sek)")
# Eigene Funktion für die Regression zwischen den Ergebnisse und Temperatur
## ----------------------------------------------------------------------------------------------------------------------------------
my_reg_skm_tmp <- function(data_frame,reg_poly=1,tmp_min, tmp_max, platz_min, platz_max, ort=NULL, geschlecht=NULL) {
if(!is.null(ort) && !is.null(geschlecht)) {
selection <- subset(data_frame, ((TMP_MEAN_RND1 >= tmp_min & TMP_MEAN_RND1 <= tmp_max) &
(Platz >= platz_min & Platz <= platz_max) & Ort == ort & Geschlecht == geschlecht))
}
else if(is.null(ort) && !is.null(geschlecht)) {
selection <- subset(data_frame, ((TMP_MEAN_RND1 >= tmp_min & TMP_MEAN_RND1 <= tmp_max) &
(Platz >= platz_min & Platz <= platz_max) & Geschlecht == geschlecht))
}
else if(!is.null(ort) && is.null(geschlecht)) {
selection <- subset(data_frame, ((TMP_MEAN_RND1 >= tmp_min & TMP_MEAN_RND1 <= tmp_max) &
(Platz >= platz_min & Platz <= platz_max) & Ort == ort))
}
if(platz_min == platz_max) {
st_platz <- platz_min
}
else {
st_platz <- paste(platz_min," - ",platz_max)
}
if(tmp_min == tmp_max) {
st_tmp <- tmp_min
}
else {
st_tmp <- paste(tmp_min," - ",tmp_max)
}
sub_title <- paste("Wettbewerb: ",ort,"; Platz: ",st_platz, "; Temp.: ",st_tmp, sep = "")
plot_reg <- ggplot(selection, aes(y=S_KM_FN, TMP_MEAN_RND1)) +
geom_point() + geom_smooth(method = "lm", formula = y~poly(x,reg_poly)) +
labs(title = paste("LM: Ergebnisse (",geschlecht,") ~ Temperatur (x^", reg_poly,")", sep = ""), x="Temperatur (°C)", y="Ergebnisse (in Sek.)", subtitle = sub_title)
plot(plot_reg)
lm_reg_sum <- summary(lm(data = selection, formula = S_KM_FN ~ poly(TMP_MEAN_RND1,reg_poly)))
cat(paste(sub_title, "; Geschlecht: ", geschlecht, sep=""))
print(lm_reg_sum)
cat(paste("-----------------------------------------------------------------------------\n"))
}
## ----------------------------------------------------------------------------------------------------------------------------------
## ----------------------------------------------------------------------------------------------------------------------------------
create_reg_plots <- function(data_frame,reg_poly=1,tmp_min, tmp_max, platz_min, platz_max) {
file_name = paste("reg_p",reg_poly,"_tmp",tmp_min,"_",tmp_max,"_platz",platz_min,"_",platz_max,sep = "")
pdf(file = paste(file_name,".pdf",sep = ""), width = 6, height = 6)
sink(file = paste(file_name,".txt",sep = ""), append = TRUE)
for(g in unique(data_frame$Geschlecht)) {
for(o in unique(data_frame$Ort)) {
my_reg_skm_tmp(data_frame,reg_poly,tmp_min,tmp_max,platz_min,platz_max, o,g)
}
}
sink()
dev.off()
}
## ----------------------------------------------------------------------------------------------------------------------------------
my_reg_skm_tmp_2 <- function(data_frame,reg_poly=1,tmp_min=0, tmp_max=25, platz_min=1, platz_max=10, ort=NULL, geschlecht=NULL, skm="S_KM_FN") {
if(!is.null(ort) && !is.null(geschlecht)) {
selection <- subset(data_frame, ((TMP_MEAN_RND1 >= tmp_min & TMP_MEAN_RND1 <= tmp_max) &
(Platz >= platz_min & Platz <= platz_max) & Ort == ort & Geschlecht == geschlecht))
}
else if(is.null(ort) && !is.null(geschlecht)) {
selection <- subset(data_frame, ((TMP_MEAN_RND1 >= tmp_min & TMP_MEAN_RND1 <= tmp_max) &
(Platz >= platz_min & Platz <= platz_max) & Geschlecht == geschlecht))
}
else if(!is.null(ort) && is.null(geschlecht)) {
selection <- subset(data_frame, ((TMP_MEAN_RND1 >= tmp_min & TMP_MEAN_RND1 <= tmp_max) &
(Platz >= platz_min & Platz <= platz_max) & Ort == ort))
}
if(platz_min == platz_max) {
st_platz <- platz_min
}
else {
st_platz <- paste(platz_min," - ",platz_max)
}
if(tmp_min == tmp_max) {
st_tmp <- tmp_min
}
else {
st_tmp <- paste(tmp_min," - ",tmp_max)
}
if(skm != "S_KM_FN") {
if(is.null(ort)) {
selection_chicago <- subset(selection, (Ort == "Chicago" & Jahr != 2012 & Jahr != 2013))
selection_all <- subset(selection, (Ort!="Chicago"))
selection <- rbind(selection_all, selection_chicago)
} else if(ort == "Chicago") {
selection <- subset(selection, (Jahr != 2012 & Jahr != 2013))
}
}
sub_title <- paste("Wettbewerb: ",ort,"; Platz: ",st_platz, "; Temp.: ",st_tmp,"; KM-Abschnitt: ", skm, sep = "")
sub_title_list <- list(ort,st_platz,st_tmp,skm, geschlecht)
names(sub_title_list) <- c("Ort","Platz","Temperatur","SKM","Geschlecht")
if(skm == 'S_KM_HM') {
final_selection <- subset(selection, S_KM_HM != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_HM, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_HM ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_FN') {
final_selection <- subset(selection, S_KM_FN != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_FN, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_FN ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_5') {
final_selection <- subset(selection, S_KM_5 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_5, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_5 ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_10') {
final_selection <- subset(selection, S_KM_10 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_10, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_10 ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_15') {
final_selection <- subset(selection, S_KM_15 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_15, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_15 ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_20') {
final_selection <- subset(selection, S_KM_20 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_20, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_20 ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_25') {
final_selection <- subset(selection, S_KM_25 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_25, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_25 ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_30') {
final_selection <- subset(selection, S_KM_30 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_30, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_30 ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_35') {
final_selection <- subset(selection, S_KM_35 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_35, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_35 ~ poly(TMP_MEAN_RND1,reg_poly))
} else if(skm == 'S_KM_40') {
final_selection <- subset(selection, S_KM_40 != 0)
plot_reg <- ggplot(final_selection, aes(y=S_KM_40, TMP_MEAN_RND1))
lm_reg <- lm(data = final_selection, formula = S_KM_40 ~ poly(TMP_MEAN_RND1,reg_poly))
}
plot_reg <- plot_reg + geom_point() + geom_smooth(method = "lm", formula = y~poly(x,reg_poly)) +
labs(title = paste("LM: Ergebnisse (",geschlecht,") ~ Temperatur (x^", reg_poly,")", sep = ""), x="Temperatur (°C)", y="Ergebnisse (in Sek.)", subtitle = sub_title)
lm_reg_sum <- summary(lm_reg)
plot(plot_reg)
cat(paste(sub_title, "; Geschlecht: ", geschlecht, sep=""))
print(lm_reg_sum)
cat(paste("-----------------------------------------------------------------------------\n"))
# Return Summary mit Wettbewerbsparameteren
lm_reg_list <- list()
lm_reg_list[[1]] <- sub_title_list
lm_reg_list[[2]] <- lm_reg_sum
names(lm_reg_list) <- c("Wettbewerb","Regression")
return(lm_reg_list)
}
## ----------------------------------------------------------------------------------------------------------------------------------
## Plots erstellen (2)
create_reg_plots_2 <- function(data_frame,reg_poly=1,tmp_min, tmp_max, platz_min, platz_max, ort=c("Berlin","London","NewYork","Chicago","Tokyo")) {
skms <- c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")
file_name = paste("reg_p",reg_poly,"_tmp",tmp_min,"_",tmp_max,"_platz",platz_min,"_",platz_max,sep = "")
pdf(file = paste(file_name,".pdf",sep = ""), width = 8, height = 6)
sink(file = paste(file_name,".txt",sep = ""), append = TRUE)
for(g in unique(data_frame$Geschlecht)) {
for(o in ort) {
for(s in skms) {
my_reg_skm_tmp_2(data_frame,reg_poly,tmp_min, tmp_max, platz_min, platz_max, ort=o, geschlecht=g, skm=s)
}
}
}
sink()
dev.off()
}
# Andere Reihenfolge der Plots: Plaetze bereits gesetzt
create_reg_plots_3 <- function(data_frame) {
skms <- c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")
ort <- c("Berlin","London","NewYork","Chicago","Tokyo")
plaetze <- c(10,5,3,1)
file_name = paste("reg_p2_alle_jahre",sep = "")
pdf(file = paste(file_name,".pdf",sep = ""), width = 8, height = 6)
sink(file = paste(file_name,".txt",sep = ""), append = TRUE)
lm_regs <- list()
i <- 1
for(g in unique(data_frame$Geschlecht)) {
for(o in ort) {
for(s in skms) {
for(p in plaetze) {
lm_reg <-my_reg_skm_tmp_2(data_frame,reg_poly = 2,tmp_min = 0, tmp_max = 25, platz_min = 1, platz_max = p, ort=o, geschlecht=g, skm=s)
lm_regs[[i]] <- lm_reg
i <- i + 1
}
}
}
}
sink()
dev.off()
return(lm_regs)
}
## Funktion um aus dem Return aus create_reg_plots_3 eine Dataframe zu erzeugen
create_reg_plots_3_to_df <- function(lmsummary) {
n <- 1
for(i in lmsummary) {
ort <- i$Wettbewerb$Ort
platz <- i$Wettbewerb$Platz
temperatur <- i$Wettbewerb$Temperatur
geschlecht <- i$Wettbewerb$Geschlecht
skm <- i$Wettbewerb$SKM
rsq <- i$Regression$r.squared
arsq <- i$Regression$adj.r.squared
if(n == 1) {
df_return <- data.frame(ort, platz, temperatur, geschlecht, skm, rsq, arsq)
n <- 2
} else {
df_new <- data.frame(ort, platz, temperatur, geschlecht, skm, rsq, arsq)
df_return <- rbind(df_return, df_new)
}
}
colnames(df_return) <- c("Ort","Platz","Temperatur","Geschlecht","SKM","RSQ","ARSQ")
return(df_return)
}
## ----------------------------------------------------------------------------------------------------------------------------------
print_temps <- function(data_frame) {
plaetze = c(1,3,5,10)
sink(file = "temperatur_verteilung.txt", append = TRUE)
for(g in unique(data_frame$Geschlecht)) {
for(o in unique(data_frame$Ort)) {
cat(paste("Ort: ", o, "; Geschlecht: ", g, "\n",sep = ""))
cat(paste("-----------------------------------------\n", sep = ""))
for(p in plaetze) {
cat(paste("Platz <= ",p,sep = ""))
print(table(subset(data_frame, (Ort==o & Geschlecht==g & Platz <= p), select = "TMP_MEAN_RND1", drop = TRUE)))
}
cat(paste("-----------------------------------------\n", sep = ""))
}
}
cat(paste("Gesamt (table): -----------------------------------------\n", sep = ""))
print(table(data_frame$TMP_MEAN_RND1, data_frame$Ort, data_frame$Geschlecht))
sink()
}
## ----------------------------------------------------------------------------------------------------------------------------------
# Verlauf - alle Jahre pro Wettbewerbsort: Meter pro Sekunden / Streckenabschnitt
plot_paces <- function() {
pdf(file = paste("plt_paces",".pdf",sep = ""), width = 9, height = 7)
for(g in unique(df_ww5rs$Geschlecht)) {
for(o in unique(df_ww5rs$Ort)) {
for(p in c(1,3,5,10)) {
if(o != "Chicago") {
plot_pace <- ggplot(subset(df_ww5rs, (Geschlecht==g & Ort==o & Platz <=p & SKM_TYP >= 1 & ZZ_INVALID == FALSE)), aes(x=SKM_TYP, y=SKM_PACE, group=Platz)) +
geom_line(stat = "identity", position = "dodge", aes(color=Platz)) +
#geom_point() +
scale_color_continuous(breaks=seq(1,p,1)) +
scale_x_continuous(breaks = seq(1,10,1), labels = c("5","10","15","20","21","25","30","35","40","42")) +
scale_y_log10() +
labs(y="Geschwindikeit (in m/s)", x="Kilometerabschnitt", title = paste("Pace in ",o," (",g,"): TOP-",p, sep="")) +
#theme(legend.position = "none") +
facet_wrap(~Jahr)
}
else if(o == "Chicago") { # Das Jahr 2012 und 2013 enthält inkorrekte Daten
plot_pace <- ggplot(subset(df_ww5rs, (Geschlecht==g & Ort==o & Platz <=p & SKM_TYP >= 1 & ZZ_INVALID == FALSE & Jahr!=2012 & Jahr!=2013)), aes(x=SKM_TYP, y=SKM_PACE, group=Platz)) +
geom_line(stat = "identity", position = "dodge", aes(color=Platz)) +
#geom_point() +
scale_color_continuous(breaks=seq(1,p,1)) +
scale_x_continuous(breaks = seq(1,10,1), labels = c("5","10","15","20","21","25","30","35","40","42")) +
scale_y_log10() +
labs(y="Geschwindikeit (in m/s)", x="Kilometerabschnitt", title = paste("Pace in ",o," (",g,"): TOP-",p, sep="")) +
#theme(legend.position = "none") +
facet_wrap(~Jahr)
}
print(plot_pace)
}
}
}
dev.off()
}
## ----------------------------------------------------------------------------------------------------------------------------------
plot_paces()
View(df_ww3_chicago_m_all)
View(df_ww5rs)
View(df_ww5)
library(psych)
library(MESS)
library(ggplot2)
library(DescTools)
library(corrplot)
library(dplyr)
View(df_ww3y)
View(df_ww5rs)
View(df_ww5)
## ----------------------------------------------------------------
# Korrelation
ggplot(data = df_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_TYP, fill=SKM_ZEIT)) +
geom_tile()
## ----------------------------------------------------------------
# Korrelation
ggplot(data = df_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_ZEIT, fill=SKM_TYP)) + geom_tile()
## ----------------------------------------------------------------
# Korrelation
ggplot(data = df_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_TYP, fill=SKM_ZEIT)) + geom_tile()
df_ww5cor <- round(cor(df_ww5rs,x = TMP_MEAN_RND1, y = SKM_ZEIT),2 )
df_ww5cor <- round(cor(df_ww5rs,x = TMP_MEAN_RND1, y = SKM_ZEIT),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, y = df_ww5rs$SKM_ZEIT),2)
df_ww5cor <- round(cor(x = df_ww5rs),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, x = df_ww5rs$SKM_ZEIT),2)
df_ww5cor <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, y = df_ww5rs$SKM_ZEIT),2)
rm(df_ww5cor)
cor_ww5rs <- round(cor(x = df_ww5rs$TMP_MEAN_RND1, y = df_ww5rs$SKM_ZEIT),2)
cor_ww5rs
## ----------------------------------------------------------------
# Korrelation
df_ww5
View(df_ww3)
## ----------------------------------------------------------------
# Korrelation
subset(df_ww3, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE), c("S_KM_5"))
## ----------------------------------------------------------------
# Korrelation
df_ww3
## ----------------------------------------------------------------
# Korrelation
df_ww5
subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE), c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))
subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))
round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")),y=c("TMP_MEAN_RND1")),2)
round(cor(x=subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN")),y=c("TMP_MEAN_RND1")),2)
round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
cor_ww5rs <- melt(round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2))
library(reshape2)
cor_ww5rs <- melt(round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2))
ggplot(data = cor_ww5rs, aes(x=TMP_MEAN_RND1, y=SKM_TYP, fill=SKM_ZEIT)) + geom_tile()
View(cor_ww5rs)
ggplot(data = cor_ww5rs, aes(x=var1, y=var2, fill=value)) + geom_tile()
ggplot(data = cor_ww5rs, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
View(cor_ww5rs)
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile()
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text()
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(x=Var1, y=Var2, fill=value))
ggplot(data = subset(cor_ww5rs, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2))
, (Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="Chicago" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)),
(Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="London" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)),
(Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value))
ggplot(data = subset(
melt(round(cor(subset(df_ww5, (Ort=="London" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)),
(Var1 == "TMP_MEAN_RND1" | Var2 == "TMP_MEAN_RND1")), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
cor_ww5rs[lower.tri(cor_ww5rs)] <- NA
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
ggplot(data = melt(cor_ww5rs)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile() +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
cor_ww5rs[lower.tri(cor_ww5rs)] <- NA
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Berlin" & Geschlecht=="M" & Platz<=5 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="NewYork" & Geschlecht=="M" & Platz<=3 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Tokyo" & Geschlecht=="M" & Platz<=3 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter: W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter: W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=1,tmp_min=0, tmp_max=12.5, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter: W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=1,tmp_min=12.5, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter (p1): W
my_reg_skm_tmp_2(data_frame = df_ww3,reg_poly=2,tmp_min=0, tmp_max=25, platz_min=1, platz_max=1, ort=NULL, geschlecht="W", skm="S_KM_40") # Best Parameter (p2): W
# Korrelation
cor_ww5rs <- round(cor(subset(df_ww5, (Ort=="Chicago" & Geschlecht=="W" & Platz<=1 & ZZ_INVALID==FALSE),
c("TMP_MEAN_RND1","S_KM_5","S_KM_10","S_KM_15","S_KM_20","S_KM_HM","S_KM_25","S_KM_30","S_KM_35","S_KM_40","S_KM_FN"))),2)
# Triangle
cor_ww5rs[upper.tri(cor_ww5rs)] <- NA
# Cor-Plot
ggplot(data = melt(cor_ww5rs, na.rm = TRUE)) +
geom_tile(aes(x=Var1, y=Var2, fill=value)) +
geom_text(aes(x=Var1, y=Var2, label=value), color="white")
# Scatterplots:
# Männer
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=TMP_MEAN_RND1, color=Ort), ) + geom_point(alpha=0.5, size=1) +
labs(y="Ergebnisse (in Sek.)", x="Temperatur (°C)", title = "Ergebnisse (M): Gesamt", subtitle = "Ergebnisse ~ Temperatur") +
scale_y_continuous(breaks = seq(7000,8500,100)) +
scale_x_continuous(breaks = seq(0,22,1)) +
scale_fill_brewer(palette="Set3") +
scale_color_discrete("Wettbewerbsort")
## ----------------------------------------------------------------------
# Histogramm: Verteilung der Ergebnisse
# Männer
ggplot(data = df_ww3y_m_all, aes(x=S_KM_FN)) +
geom_histogram(binwidth = 50, color="white", fill="orange") +
labs(x="Ergebnisse (in Sek.)", y="Häufigkeit (abs)", title = "Verteilung d. Ergebnisse (M): Gesamt") +
scale_x_continuous(breaks = seq(7000,9000,100)) + scale_y_continuous(breaks = seq(0,70,5))
# Boxplot: Ergebnisse / Wettbewerbsort (M)
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): Gesamt") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggplot(df_ww3y_m_top3, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): TOP-3") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggsave(filename = "bplt_ergb_m_all.pdf", plot = last_plot(),units = "px",scale = 1, limitsize = FALSE, device = "pdf", dpi=300, width = 1920, height = 1080)
# Boxplot: Ergebnisse / Wettbewerbsort (M)
ggplot(df_ww3y_m_all, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): Gesamt") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
ggplot(df_ww3y_m_top3, aes(y=S_KM_FN, x=Ort, fill=Ort)) +
geom_boxplot(alpha=0.7) +
labs(y="Zeit (in Sek.)", x="Wettbewerbsort", title = "Ergebnisse (M): TOP-3") +
scale_y_continuous(breaks = seq(7000,8350,100)) +
theme(legend.position = "none") +
scale_fill_brewer(palette="Set3")
## ----------------------------------------------------------------
# pairwise-test: two.sided
pairwise.t.test(subset(df_ww3y,Geschlecht=="M")$S_KM_FN, df_wma_ort_skm_m$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
## ----------------------------------------------------------------
# pairwise-test: two.sided
pairwise.t.test(df_ww3y_m_all$S_KM_FN, df_ww3y_m_all$Ort,
p.adjust.method = "bonferroni", alternative = "two.sided",
paired = FALSE, pool.sd = FALSE)
